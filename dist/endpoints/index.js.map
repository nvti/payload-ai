{"version":3,"sources":["../../src/endpoints/index.ts"],"sourcesContent":["import type { PayloadRequest } from 'payload'\n\nimport type { ActionMenuItems, Endpoints, PluginConfig } from '../types.js'\n\nimport { defaultPrompts } from '../ai/prompts.js'\nimport {\n  PLUGIN_API_ENDPOINT_GENERATE,\n  PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n  PLUGIN_INSTRUCTIONS_TABLE,\n  PLUGIN_NAME,\n} from '../defaults.js'\nimport { registerEditorHelper } from '../libraries/handlebars/helpers.js'\nimport { handlebarsHelpersMap } from '../libraries/handlebars/helpersMap.js'\nimport { replacePlaceholders } from '../libraries/handlebars/replacePlaceholders.js'\nimport { getGenerationModels } from '../utilities/getGenerationModels.js'\n\nconst assignPrompt = async (\n  action: ActionMenuItems,\n  {\n    type,\n    actionParams,\n    context,\n    field,\n    layout,\n    systemPrompt = '',\n    template,\n  }: {\n    actionParams: Record<any, any>\n    context: object\n    field: string\n    layout: string\n    systemPrompt: string\n    template: string\n    type: string\n  },\n) => {\n  const prompt = await replacePlaceholders(template, context)\n  const toLexicalHTML = type === 'richText' ? handlebarsHelpersMap.toHTML.name : ''\n\n  const assignedPrompts = {\n    layout: type === 'richText' ? layout : undefined,\n    prompt,\n    //TODO: Define only once on a collection level\n    system: type === 'richText' ? systemPrompt : undefined,\n  }\n\n  if (action === 'Compose') {\n    return assignedPrompts\n  }\n\n  const { layout: getLayout, system: getSystemPrompt } = defaultPrompts.find(\n    (p) => p.name === action,\n  )\n\n  let updatedLayout = layout\n  if (getLayout) {\n    updatedLayout = getLayout()\n  }\n\n  const system = getSystemPrompt({\n    ...(actionParams || {}),\n    prompt,\n    systemPrompt,\n  })\n\n  return {\n    layout: updatedLayout,\n    // TODO: revisit this toLexicalHTML\n    prompt: await replacePlaceholders(`{{${toLexicalHTML} ${field}}}`, context),\n    system,\n  }\n}\n\nexport const endpoints: (pluginConfig: PluginConfig) => Endpoints = (pluginConfig) =>\n  ({\n    textarea: {\n      //TODO:  This is the main endpoint for generating content - its just needs to be renamed to 'generate' or something.\n      handler: async (req: PayloadRequest) => {\n        const data = await req.json?.()\n\n        const { locale = 'en', options } = data\n        const { action, actionParams, instructionId } = options\n        const contextData = data.doc\n\n        if (!instructionId) {\n          throw new Error(\n            `Instruction ID is required for \"${PLUGIN_NAME}\" to work, please check your configuration`,\n          )\n        }\n\n        const instructions = await req.payload.findByID({\n          id: instructionId,\n          collection: PLUGIN_INSTRUCTIONS_TABLE,\n        })\n\n        const { collections } = req.payload.config\n        const collection = collections.find(\n          (collection) => collection.slug === PLUGIN_INSTRUCTIONS_TABLE,\n        )\n\n        const { custom: { [PLUGIN_NAME]: { editorConfig = {} } = {} } = {} } = collection.admin\n        const { schema: editorSchema = {} } = editorConfig\n        const { prompt: promptTemplate = '' } = instructions\n\n        const schemaPath = instructions['schema-path'] as string\n        const fieldName = schemaPath?.split('.').pop()\n\n        registerEditorHelper(req.payload, schemaPath)\n\n        const { defaultLocale, locales = [] } = req.payload.config.localization || {}\n        const localeData = locales.find((l) => {\n          return l.code === locale\n        })\n\n        const localeInfo = localeData?.label[defaultLocale] || locale\n\n        const model = getGenerationModels(pluginConfig)\n          .find((model) => model.id === instructions['model-id'])\n        const settingsName = model.settings?.name\n        const modelOptions = instructions[settingsName] || {}\n\n        const prompts = await assignPrompt(action, {\n          type: instructions['field-type'] as string,\n          actionParams,\n          context: contextData,\n          field: fieldName,\n          layout: instructions.layout,\n          systemPrompt: instructions.system,\n          template: promptTemplate as string,\n        })\n\n        // console.log('Running handler with prompts:', prompts)\n        return model\n          .handler?.(prompts.prompt, {\n            ...modelOptions,\n            editorSchema,\n            layout: prompts.layout,\n            locale: localeInfo,\n            system: prompts.system,\n          })\n          .catch((error) => {\n            console.error('Error: endpoint - generating text:', error)\n            return new Response(JSON.stringify(error.message), { status: 500 })\n          })\n      },\n      method: 'post',\n      path: PLUGIN_API_ENDPOINT_GENERATE,\n    },\n    upload: {\n      handler: async (req: PayloadRequest) => {\n        const data = await req.json?.()\n\n        const { options } = data\n        const { instructionId } = options\n        const contextData = data.doc\n\n        let instructions = { 'model-id': '', prompt: '' }\n\n        if (instructionId) {\n          // @ts-expect-error\n          instructions = await req.payload.findByID({\n            id: instructionId,\n            collection: PLUGIN_INSTRUCTIONS_TABLE,\n          })\n        }\n\n        const { prompt: promptTemplate = '' } = instructions\n        const schemaPath = instructions['schema-path']\n\n        registerEditorHelper(req.payload, schemaPath)\n\n        const text = await replacePlaceholders(promptTemplate, contextData)\n        const modelId = instructions['model-id']\n        const uploadCollectionSlug = instructions['relation-to']\n\n        const model = getGenerationModels(pluginConfig)\n          .find((model) => model.id === modelId)\n        const settingsName = model.settings?.name\n        const modelOptions = instructions[settingsName] || {}\n\n        const result = await model.handler?.(text, modelOptions)\n\n        const assetData = await req.payload.create({\n          collection: uploadCollectionSlug,\n          data: result.data,\n          file: result.file,\n        })\n\n        return new Response(\n          JSON.stringify({\n            result: {\n              id: assetData.id,\n              alt: assetData.alt,\n            },\n          }),\n        )\n      },\n      method: 'post',\n      path: PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n    },\n  }) satisfies Endpoints\n"],"names":["defaultPrompts","PLUGIN_API_ENDPOINT_GENERATE","PLUGIN_API_ENDPOINT_GENERATE_UPLOAD","PLUGIN_INSTRUCTIONS_TABLE","PLUGIN_NAME","registerEditorHelper","handlebarsHelpersMap","replacePlaceholders","getGenerationModels","assignPrompt","action","type","actionParams","context","field","layout","systemPrompt","template","prompt","toLexicalHTML","toHTML","name","assignedPrompts","undefined","system","getLayout","getSystemPrompt","find","p","updatedLayout","endpoints","pluginConfig","textarea","handler","req","data","json","locale","options","instructionId","contextData","doc","Error","instructions","payload","findByID","id","collection","collections","config","slug","custom","editorConfig","admin","schema","editorSchema","promptTemplate","schemaPath","fieldName","split","pop","defaultLocale","locales","localization","localeData","l","code","localeInfo","label","model","settingsName","settings","modelOptions","prompts","catch","error","console","Response","JSON","stringify","message","status","method","path","upload","text","modelId","uploadCollectionSlug","result","assetData","create","file","alt"],"mappings":"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"}